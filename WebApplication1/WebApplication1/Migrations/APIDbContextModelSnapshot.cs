// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(APIDbContext))]
    partial class APIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("WebApplication1.Models.Actor", b =>
                {
                    b.Property<string>("ActorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content_Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkTwiter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkfb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrizeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("String")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorId");

                    b.HasIndex("PrizeID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("WebApplication1.Models.Blog", b =>
                {
                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("WebApplication1.Models.Directors", b =>
                {
                    b.Property<string>("DirectorsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content_Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Directors_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkTwiter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkfb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrizeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DirectorsId");

                    b.HasIndex("PrizeId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("WebApplication1.Models.Genre", b =>
                {
                    b.Property<string>("TypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type_Name")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("WebApplication1.Models.MediaActor", b =>
                {
                    b.Property<string>("MediaActorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkActorMedia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MediaActor");
                });

            modelBuilder.Entity("WebApplication1.Models.MediaDirector", b =>
                {
                    b.Property<string>("MediaDirectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectorsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkDirectorMedia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaDirectorId");

                    b.HasIndex("DirectorsId");

                    b.ToTable("MediaDirector");
                });

            modelBuilder.Entity("WebApplication1.Models.MediaProductor", b =>
                {
                    b.Property<string>("MediaProductorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkProductorMedia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaProductorId");

                    b.HasIndex("ProductorId");

                    b.ToTable("MediaProductor");
                });

            modelBuilder.Entity("WebApplication1.Models.Movie", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ave_Rate")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content_Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Link_Trailer")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrizeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReleaseYear")
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("movieId");

                    b.HasIndex("DirectorsId");

                    b.HasIndex("PrizeId");

                    b.HasIndex("ProductorId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("WebApplication1.Models.MovieActor", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");
                });

            modelBuilder.Entity("WebApplication1.Models.PhotoActor", b =>
                {
                    b.Property<string>("PhotoActorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("PhotoActor");
                });

            modelBuilder.Entity("WebApplication1.Models.PhotoDirector", b =>
                {
                    b.Property<string>("PhotoProductorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoProductorId");

                    b.HasIndex("DirectorsId");

                    b.ToTable("PhotoDirector");
                });

            modelBuilder.Entity("WebApplication1.Models.Prize", b =>
                {
                    b.Property<string>("PrizeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Prize_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrizeId");

                    b.ToTable("Prizes");
                });

            modelBuilder.Entity("WebApplication1.Models.Productor", b =>
                {
                    b.Property<string>("ProductorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content_overView")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkTwiter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkfb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Productor_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductorId");

                    b.ToTable("Productors");
                });

            modelBuilder.Entity("WebApplication1.Models.TypeMovie", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MovieId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("TypeMovies");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.UserBlog", b =>
                {
                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlogs");
                });

            modelBuilder.Entity("WebApplication1.Models.UserCommentMovie", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommentMovies");
                });

            modelBuilder.Entity("WebApplication1.Models.UserFavoriteMovie", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavoriteMovies");
                });

            modelBuilder.Entity("WebApplication1.Models.Actor", b =>
                {
                    b.HasOne("WebApplication1.Models.Prize", "Prize")
                        .WithMany()
                        .HasForeignKey("PrizeID");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("WebApplication1.Models.Directors", b =>
                {
                    b.HasOne("WebApplication1.Models.Prize", "Prize")
                        .WithMany()
                        .HasForeignKey("PrizeId");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("WebApplication1.Models.MediaActor", b =>
                {
                    b.HasOne("WebApplication1.Models.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId");

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("WebApplication1.Models.MediaDirector", b =>
                {
                    b.HasOne("WebApplication1.Models.Directors", "Directors")
                        .WithMany()
                        .HasForeignKey("DirectorsId");

                    b.Navigation("Directors");
                });

            modelBuilder.Entity("WebApplication1.Models.MediaProductor", b =>
                {
                    b.HasOne("WebApplication1.Models.Productor", "Productor")
                        .WithMany()
                        .HasForeignKey("ProductorId");

                    b.Navigation("Productor");
                });

            modelBuilder.Entity("WebApplication1.Models.Movie", b =>
                {
                    b.HasOne("WebApplication1.Models.Directors", "Directors")
                        .WithMany()
                        .HasForeignKey("DirectorsId");

                    b.HasOne("WebApplication1.Models.Prize", "Prize")
                        .WithMany()
                        .HasForeignKey("PrizeId");

                    b.HasOne("WebApplication1.Models.Productor", "Productor")
                        .WithMany()
                        .HasForeignKey("ProductorId");

                    b.Navigation("Directors");

                    b.Navigation("Prize");

                    b.Navigation("Productor");
                });

            modelBuilder.Entity("WebApplication1.Models.MovieActor", b =>
                {
                    b.HasOne("WebApplication1.Models.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("WebApplication1.Models.PhotoActor", b =>
                {
                    b.HasOne("WebApplication1.Models.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId");

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("WebApplication1.Models.PhotoDirector", b =>
                {
                    b.HasOne("WebApplication1.Models.Directors", "Directors")
                        .WithMany()
                        .HasForeignKey("DirectorsId");

                    b.Navigation("Directors");
                });

            modelBuilder.Entity("WebApplication1.Models.TypeMovie", b =>
                {
                    b.HasOne("WebApplication1.Models.Movie", "Movie")
                        .WithMany("TypeMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Genre", "Genre")
                        .WithMany("TypeMovies")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("WebApplication1.Models.UserBlog", b =>
                {
                    b.HasOne("WebApplication1.Models.Blog", "Blog")
                        .WithMany("UserBlogs")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany("UserBlogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.UserCommentMovie", b =>
                {
                    b.HasOne("WebApplication1.Models.Movie", "Movie")
                        .WithMany("UserCommentMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany("UserCommentMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.UserFavoriteMovie", b =>
                {
                    b.HasOne("WebApplication1.Models.Movie", "Movie")
                        .WithMany("UserFavoriteMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany("UserFavoriteMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Actor", b =>
                {
                    b.Navigation("MovieActors");
                });

            modelBuilder.Entity("WebApplication1.Models.Blog", b =>
                {
                    b.Navigation("UserBlogs");
                });

            modelBuilder.Entity("WebApplication1.Models.Genre", b =>
                {
                    b.Navigation("TypeMovies");
                });

            modelBuilder.Entity("WebApplication1.Models.Movie", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("TypeMovies");

                    b.Navigation("UserCommentMovies");

                    b.Navigation("UserFavoriteMovies");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Navigation("UserBlogs");

                    b.Navigation("UserCommentMovies");

                    b.Navigation("UserFavoriteMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
